// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    username       String? @unique
    profilePicture String?
    isRegistered   Boolean @default(false)

    accounts  Account[]
    sessions  Session[]
    Post      Post[]
    following Follow[]  @relation(name: "follower")
    followed  Follow[]  @relation(name: "followed")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id              String     @id @default(cuid())
    text            String?
    createdAt       DateTime //TODO: Add 'postedAt' if decide to add scheduled posts
    //images added later  
    visibility      Visibility @default(everyone)
    replyPermission Visibility @default(everyone)

    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    replyToId String?
    replyTo   Post?   @relation(name: "Replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    replies Post[] @relation("Replies")
}

model Follow {
    id         String   @id @default(cuid())
    followerId String
    follower   User     @relation(name: "follower", fields: [followedId], references: [id], onDelete: Cascade, map: "follower_fk")
    followedId String
    followed   User     @relation(name: "followed", fields: [followedId], references: [id], onDelete: Cascade, map: "followed_fk")
    createdAt  DateTime
    accepted   Boolean  @default(true)

    @@unique([followerId, followedId])
}

enum Visibility {
    everyone
    followers
}
